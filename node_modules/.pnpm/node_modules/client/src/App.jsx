"use client"

import React, { useState, useEffect, useRef } from "react"
import "./global.css"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Textarea } from "@/components/ui/textarea"
import { Slider } from "@/components/ui/slider"
import { Switch } from "@/components/ui/switch"
import { Progress } from "@/components/ui/progress"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import {
  BookOpen,
  Mic,
  Upload,
  Star,
  Trophy,
  Settings,
  MicOff,
  Play,
  Pause,
  Square,
  Eye,
  Type,
  Palette,
  Volume2,
  Award,
  Target,
  FileText,
  X,
  Check,
} from "lucide-react"

export default function ReadingAssistant() {
  const [currentText, setCurrentText] = useState(
    "The sun was shining brightly in the sky. A little bird sat on a tree branch. The bird sang a beautiful song. Children played happily in the garden."
  )

  const [uploadedFile, setUploadedFile] = useState(null)
  const [isProcessingFile, setIsProcessingFile] = useState(false)
  const [fileError, setFileError] = useState("")
  const [textInputMode, setTextInputMode] = useState("sample")
  const [manualText, setManualText] = useState("")
  const [sampleTexts] = useState([
    {
      title: "The Happy Garden",
      content:
        "The sun was shining brightly in the sky. A little bird sat on a tree branch. The bird sang a beautiful song. Children played happily in the garden.",
      level: "Beginner",
    },
    {
      title: "My School Day",
      content:
        "I wake up early every morning. I brush my teeth and eat breakfast. Then I walk to school with my friends. We learn many new things every day.",
      level: "Beginner",
    },
    {
      title: "The Market Visit",
      content:
        "Mama and I went to the market today. We bought fresh vegetables and fruits. The tomatoes were red and juicy. I helped carry the shopping bags home.",
      level: "Intermediate",
    },
  ])
  const [selectedSampleIndex, setSelectedSampleIndex] = useState(0)

  const [isListening, setIsListening] = useState(false)
  const [isReading, setIsReading] = useState(false)
  const [userScore, setUserScore] = useState(0)
  const [streakCount, setStreakCount] = useState(0)
  const [totalWordsRead, setTotalWordsRead] = useState(0)

  const [recognizedText, setRecognizedText] = useState("")
  const [currentWordIndex, setCurrentWordIndex] = useState(0)
  const [wordStatuses, setWordStatuses] = useState([])
  const [feedback, setFeedback] = useState("")
  const [speechSupported, setSpeechSupported] = useState(false)

  const [speechConfidence, setSpeechConfidence] = useState(0)
  const [speechAttempts, setSpeechAttempts] = useState(0)
  const [maxAttempts] = useState(3)
  const [pronunciationHelp, setPronunciationHelp] = useState("")
  const [isCalibrating, setIsCalibrating] = useState(false)
  const [noiseLevel, setNoiseLevel] = useState(0)
  const [speechLanguage, setSpeechLanguage] = useState("en-US")

  const [ttsSupported, setTtsSupported] = useState(false)
  const [availableVoices, setAvailableVoices] = useState([])
  const [selectedVoice, setSelectedVoice] = useState("")
  const [speechRate, setSpeechRate] = useState([0.8])
  const [speechPitch, setSpeechPitch] = useState([1.0])
  const [ttsWordIndex, setTtsWordIndex] = useState(0)
  const [isPaused, setIsPaused] = useState(false)

  const [fontSize, setFontSize] = useState([20])
  const [lineSpacing, setLineSpacing] = useState([1.6])
  const [chunkSize, setChunkSize] = useState([4])
  const [showChunks, setShowChunks] = useState(true)
  const [highContrast, setHighContrast] = useState(false)
  const [dyslexiaFont, setDyslexiaFont] = useState(false)
  const [reducedClutter, setReducedClutter] = useState(false)
  const [showAccessibilityPanel, setShowAccessibilityPanel] = useState(false)

  const [achievements, setAchievements] = useState([])
  const [sessionWordsRead, setSessionWordsRead] = useState(0)
  const [encouragementMessages] = useState([
    "Great job! Keep going!",
    "You're doing amazing!",
    "Wonderful reading!",
    "Excellent work!",
    "You're getting better!",
    "Fantastic effort!",
    "Keep up the good work!",
    "You're a reading star!",
  ])

  const recognitionRef = useRef(null)
  const utteranceRef = useRef(null)
  const ttsTimeoutRef = useRef(null)

  const wordsArray = currentText
    .toLowerCase()
    .split(/\s+/)
    .filter((word) => word.length > 0)

  // Initialize Speech Recognition & TTS
  useEffect(() => {
    if (typeof window !== "undefined") {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition
      if (SpeechRecognition) {
        setSpeechSupported(true)
        recognitionRef.current = new SpeechRecognition()

        const recognition = recognitionRef.current
        recognition.continuous = true
        recognition.interimResults = true
        recognition.lang = speechLanguage

        recognition.onresult = (event) => {
          let finalTranscript = ""
          let interimTranscript = ""
          let maxConfidence = 0

          for (let i = event.resultIndex; i < event.results.length; i++) {
            const transcript = event.results[i].transcript
            const confidence = event.results[i][0].confidence || 0

            if (event.results[i].isFinal) {
              finalTranscript += transcript
              maxConfidence = Math.max(maxConfidence, confidence)
            } else {
              interimTranscript += transcript
            }
          }

          setSpeechConfidence(maxConfidence)
          setRecognizedText(interimTranscript)

          if (finalTranscript) {
            handleSpeechResult(finalTranscript.trim().toLowerCase(), maxConfidence)
          }
        }

        recognition.onerror = (event) => {
          console.error("Speech recognition error:", event.error)
          let errorMessage = ""
          switch (event.error) {
            case "no-speech":
              errorMessage = "I didn't hear anything. Try speaking a bit louder!"
              break
            case "audio-capture":
              errorMessage = "I can't access your microphone. Please check your settings."
              break
            case "not-allowed":
              errorMessage = "Please allow microphone access to practice reading."
              break
            case "network":
              errorMessage = "Network issue. Let's try again in a moment."
              break
            case "aborted":
              errorMessage = "Speech recognition was stopped. Ready to try again?"
              break
            default:
              errorMessage = "Don't worry! Let's try again. Speak clearly and I'll listen carefully."
          }
          setFeedback(errorMessage)
          setIsListening(false)
          setRecognizedText("")
        }

        recognition.onstart = () => {
          setNoiseLevel(0)
          setRecognizedText("")
          console.log("[v0] Speech recognition started")
        }

        recognition.onend = () => {
          console.log("[v0] Speech recognition ended, isListening:", isListening)
          if (isListening) {
            setTimeout(() => {
              if (isListening && recognitionRef.current) {
                try {
                  recognitionRef.current.start()
                } catch (error) {
                  console.error("[v0] Error restarting recognition:", error)
                  setFeedback("Having trouble with speech recognition. Please try again.")
                  setIsListening(false)
                }
              }
            }, 100)
          }
        }
      }

      if ("speechSynthesis" in window) {
        setTtsSupported(true)
        const loadVoices = () => {
          const voices = speechSynthesis.getVoices()
          setAvailableVoices(voices)
        }
        loadVoices()
      }
    }
  }, [speechLanguage, isListening])

  // Example handleSpeechResult function
  const handleSpeechResult = (transcript, confidence) => {
    console.log("Recognized:", transcript, "Confidence:", confidence)
    // Add logic to update wordStatuses, score, feedback, etc.
  }

  return (
    <div>
      <h1>Reading Assistant</h1>
      <Card>
        <CardHeader>
          <CardTitle>Current Text</CardTitle>
        </CardHeader>
        <CardContent>
          <p>{currentText}</p>
        </CardContent>
      </Card>

      <Button onClick={() => setIsListening(!isListening)}>
        {isListening ? "Stop Listening" : "Start Listening"}
      </Button>

      <p>Recognized Text: {recognizedText}</p>
      <p>Feedback: {feedback}</p>
      <p>User Score: {userScore}</p>
    </div>
  )
}